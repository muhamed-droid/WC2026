package ba.unsa.etf.rpr.Business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Confederation;
import ba.unsa.etf.rpr.exceptions.MyException;

import java.util.List;

/**
 * Business Logic Layer for management of Confederations
 *
 * @author Muhamed-droid
 */

public class ConfederationManager {

    /**
     * @param con specifies Confederation
     * @return instance of Confederation
     * @throws MyException
     * @author Muhamed-droid
     */
    public Confederation add(Confederation con) throws MyException {
        if (con.getId() != 0){
            throw new MyException("Can't add confederation with ID. ID is autogenerated");
        }


        try{
            return DaoFactory.confederationDao().add(con);
        }catch (MyException e){
            if (e.getMessage().contains("UQ_NAME")){
                throw new MyException("Confederation with same name exists");
            }
            throw e;
        }
    }

    /**
     * @param categoryId specifies Confederation
     * void function, that deletes instance
     * @throws MyException
     * @author Muhamed-droid
     */
    public void delete(int categoryId) throws MyException{
        try{
            DaoFactory.confederationDao().delete(categoryId);
        }catch (MyException e){
            if (e.getMessage().contains("FOREIGN KEY")){
                throw new MyException("Cannot delete confederation which is related to teams." +
                        " First delete related teams before deleting confederation.");
            }
            throw e;
        }

    }

    /**
     * @param con specifies Confederation
     * @return instance of Confederation
     * @throws MyException
     * @author Muhamed-droid
     */
    public Confederation update(Confederation con) throws MyException{
        return DaoFactory.confederationDao().update(con);
    }

    /**
     * @throws MyException
     * @return list of confederations
     * @author Muhamed-droid
     */
    public List<Confederation> getAll() throws MyException{
        return DaoFactory.confederationDao().getAll();
    }

}
